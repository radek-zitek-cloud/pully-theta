# Docker Compose for Go Authentication Service
# Provides complete development and testing environment

services:
  # =============================================================================
  # Application Service
  # =============================================================================
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        VERSION: ${VERSION:-1.0.0}
        BUILD_TIME: ${BUILD_TIME:-2025-06-20T16:00:00Z}
    container_name: auth-service
    restart: unless-stopped
    ports:
      - "6910:6910"
    environment:
      # Server Configuration
      PORT: 6910
      HOST: 0.0.0.0
      ENVIRONMENT: development
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: authuser
      DB_PASSWORD: authpass
      DB_NAME: authdb
      DB_SSL_MODE: disable
      DB_MAX_OPEN_CONNS: 25
      DB_MAX_IDLE_CONNS: 10
      DB_CONN_MAX_LIFETIME: 5m
      
      # JWT Configuration
      JWT_SECRET: your-super-secret-jwt-key-change-in-production-min-32-chars
      JWT_ACCESS_EXPIRY: 15m
      JWT_REFRESH_EXPIRY: 168h
      
      # Security Configuration
      BCRYPT_COST: 12
      
      # Rate Limiting Configuration
      RATE_LIMIT_ENABLED: true
      RATE_LIMIT_REQUESTS_PER_MINUTE: 60
      RATE_LIMIT_BURST: 10
      
      # Email Configuration (development)
      EMAIL_ENABLED: false
      EMAIL_PROVIDER: mock
      
      # Logging Configuration
      LOG_LEVEL: debug
      LOG_FORMAT: text
      
      # CORS Configuration
      CORS_ALLOWED_ORIGINS: "*"
      CORS_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
      CORS_ALLOWED_HEADERS: "Content-Type,Authorization"
    volumes:
      - .:/app
      - /app/bin # Prevent overwriting binary
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auth-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6910/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # PostgreSQL Database
  # =============================================================================
  postgres:
    image: postgres:17-alpine
    container_name: auth-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: authuser
      POSTGRES_PASSWORD: authpass
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - auth-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authuser -d authdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # =============================================================================
  # Redis Cache
  # =============================================================================
  redis:
    image: redis:8-alpine
    container_name: auth-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redispass
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - auth-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # =============================================================================
  # Database Migration Tool
  # =============================================================================
  migrate:
    image: migrate/migrate
    container_name: auth-migrate
    profiles: ["tools"]
    volumes:
      - ./migrations:/migrations
    command: >
      -path=/migrations 
      -database=postgres://authuser:authpass@postgres:5432/authdb?sslmode=disable 
      up
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - auth-network

  # =============================================================================
  # Development Tools
  # =============================================================================
  
  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: auth-pgadmin
    restart: unless-stopped
    profiles: ["tools"]
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - auth-network

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: auth-redis-commander
    restart: unless-stopped
    profiles: ["tools"]
    environment:
      REDIS_HOSTS: local:redis:6379:0:redispass
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - auth-network

  # Nginx reverse proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: auth-nginx
    restart: unless-stopped
    profiles: ["proxy"]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - auth-service
    networks:
      - auth-network

# =============================================================================
# Networks
# =============================================================================
networks:
  auth-network:
    driver: bridge
    name: auth-network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    name: auth_postgres_data
  redis_data:
    name: auth_redis_data
  pgadmin_data:
    name: auth_pgadmin_data
